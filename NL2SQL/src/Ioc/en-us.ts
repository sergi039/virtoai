const strings: IVirtoStrings = {
    newChat: 'New Chat',
    btnAdd: 'Add',
    btnDelete: 'Delete',
    btnCancel: 'Cancel',
    btnClose: 'Cancel',
    footerTitle: 'My Profile',
    syncSuccess: 'Success',
    syncError: 'Error',
    loading: 'Loading...',

    InfoPanel: {
        loading: 'Loading settings...',
        noSyncData: 'No synchronization data',
        noData: 'No data',
        records: 'records',
        recordsShort: 'records',
        recordsK: 'K records',
        recordsM: 'M records'
    },

    Chat: {
        model: 'Model',
        footerTitle: 'NL2SQL Assistant',
        history: 'Chat history',
        shown: 'Shown',
        from: 'from',
        notAvailable: 'N/A',
        feedbackSaveSuccess: 'Feedback saved successfully!',
        feedbackSaveFailed: 'Failed to save feedback!',
        sqlSavedSuccess: 'SQL saved successfully for training!',
        sqlSavedFailed: 'Failed to save SQL for training!',
        noResultsFound: "No data found for your query.",
        invalidResponse: "Invalid query. Please try again.",
        exampleTitle: 'How can I help you today?',
        inputPlaceholder: "Message NL2SQL Assistant",
        deleteChatConfirmation: "Are you sure you want to delete this chat?",
        voiceInput: 'Voice input',
        sendMessage: 'Send message',
        textCopied: 'Text copied to clipboard',
        cancelVoiceInput: 'Cancel voice input',
        confirmVoiceInput: 'Confirm voice input',
        listening: 'Listening...',
        microphoneAccessDenied: 'Microphone access denied',
        speechConfigNotAvailable: 'Speech configuration not available',
        recognitionError: 'Recognition error',
        recognitionStartError: 'Recognition start error',
        errorStartingRecognition: 'Error starting recognition',
        recognizedText: 'Recognized text',
        detectedLanguage: 'Detected language',
        couldNotParseLanguageDetection: 'Could not parse language detection result',
        unknown: 'Unknown',
        selectModels: 'Select models',
        allModels: 'All models',
        processing: 'Processing your query with multiple AI models...',
        loading: 'Loading...',
        noModelSelected: 'No model selected',
        noAIResponse: 'Error: No response from AI',
        failedToGetResponse: 'Error: Failed to get AI response',
        failedToUpdateMessage: 'Error: Failed to update message',
        syntaxError: 'There was an issue with the SQL syntax generated for your query. Please try rephrasing your request.',
        generationError: 'We encountered an error while processing your request. Please try again or rephrase your query.',
        unclearRequest: 'Your query is unclear or no matching data was found. Could you please clarify your request?',
        clarificationQuestionTitle: 'AI answer',
        suggestedOptions: 'Suggested options',
        aiSystemResponse: 'Here is the answer to request:',
        improveAnswerQuestion: 'To improve the answer, you can provide a response to these question.',
        
        dateCategories: {
            today: "Today",
            yesterday: "Yesterday",
            lastSevenDays: "Last 7 days",
            months: [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ]
        },

        ToolTips: {
            chatTooltipTitle: 'Manage Chat Access',
            searchUsersPlaceholder: 'Search users...',
            noUsersFound: 'No users found',
            noUsersAvailable: 'No users available',
            selectedUsers: 'Selected:',
            chatHistoryManageUsers: 'Manage users in this chat',
            chatHistoryManageUsersTooltip: 'Manage users in this chat',
            chatHistoryManageUsersTooltipSave: 'Save changes to user permissions',
            chatHistoryManageUsersTooltipCancel: 'Cancel changes to user permissions',
            addPeople: 'Add people',
            addPeopleSearch: 'Search by name or email',
            startTypingToSearch: 'Start typing to search for people',
            youLabel: 'You',
            leave: 'Leave'
        },

        UserManagement: {
            userAddedSuccess: 'Users successfully added to chat',
            userAddedError: 'Failed to add users to chat',
            userRemovedSuccess: 'User successfully removed from chat',
            userRemovedError: 'Failed to remove user from chat'
        },

        ContextMenu: {
            copyValue: 'Copy value',
            openUrl: 'Open URL',
            inspectField: 'Inspect field',
            tableInfo: 'Table information',
            valueCopied: 'Value copied to clipboard',
            urlOpened: 'URL opened successfully',
            urlGenerationFailed: 'Failed to generate URL - missing required data',
            fieldInfo: 'Field: {fieldName}, value output to console',
            tableColumnInfo: 'Table: {tableName}, Column: {columnName}',
            emptyFieldError: 'This field is empty'
        }
    },

    UserOptions: {
        settings: 'Settings',
        rules: 'Rules',
        logout: 'Log out',
        contact: 'Contact us'
    },

    Auth: {
        redirectingToLogin: 'Redirecting to login...',
    },

    AIModel: {
        chatGPT: 'GPT-5',
        chatClaude: 'Claude',
        all: 'All models',
        auto: 'Auto (recommended)',
        local: 'LocalAI',
        agent: 'Agent',
        claude: 'Claude',
        gemini: 'Gemini'
    },

    ServiceNames: {
        employee: 'employee',
        sale: 'sale',
        product: 'product',
        customer: 'customer',
        revenue: 'revenue'
    },

    SettingsPanel: {
        loading: 'Loading...',
        saveSuccess: 'Settings saved successfully!',
        saveError: 'Failed to save settings. Please try again.',
        availableServices: 'Available Services',
        selectServices: 'Select services',
        tableSelection: 'Table Selection',
        selectTables: 'Select tables',
        mainSetting: 'Main Settings',
        serviceConfig: 'Service Configuration',
        selectServiceConfig: 'Select service to configure:',
        disabled: '(disabled)',
        save: 'Save',
        cancel: 'Cancel',
        databaseTitle: 'Database Configuration',

        apollo: {
            title: 'Apollo',
            setup: 'Setup',
            domain: 'Domain',
            emailDomain: 'Email Domain',
            name: 'Name',
            limit: 'Limit',
            duration: 'Duration',
            timeout: 'Timeout',
            syncButton: 'Synchronize Apollo',
            syncDescription: 'Update data from Apollo',
            matchFreshdesk: 'Match with Freshdesk',
            matchPipedrive: 'Match with Pipedrive'
        },

        ortto: {
            title: 'Ortto',
            setup: 'Setup',
            importData: 'Import Data',
            limit: 'Limit',
            duration: 'Duration',
            timeout: 'Timeout',
            syncButton: 'Synchronize Ortto',
            syncDescription: 'Update data from Ortto',
            noLimit: 'No Limit',
            matchFreshdesk: 'Match with Freshdesk',
            matchPipedrive: 'Match with Pipedrive'
        },

        freshdesk: {
            title: 'Freshdesk',
            entities: 'Entities to Import',
            allEntities: 'All Entities',
            ticketsOnly: 'Tickets Only',
            contactsOnly: 'Contacts Only',
            companiesOnly: 'Companies Only',
            conversations: 'Include Conversations',
            sinceDate: 'Since Date',
            untilDate: 'Until Date',
            duration: 'Duration',
            timeout: 'Timeout',
            syncButton: 'Synchronize Freshdesk',
            syncDescription: 'Update data from Freshdesk',
            selectDate: 'Select a date...',
            batchSize: 'Limit',
            insecure: 'Allow Insecure Connections',
            ticketId: 'Ticket ID (Optional)',
            parallelThreads: 'Parallel Threads'
        },

        pipedrive: {
            title: 'Pipedrive',
            setup: 'Setup',
            fullImport: 'Full Import',
            match: 'Match with Freshdesk',
            entities: 'Entities to Import',
            entitiesAll: 'All',
            duration: 'Duration',
            contacts: 'Ð¡ontacts',
            timeout: 'Timeout',
            syncButton: 'Synchronize Pipedrive',
            syncDescription: 'Update data from Pipedrive',
            entitiesDeals: 'Deals',
            entitiesActivities: 'Activities',
            entitiesPersons: 'Persons',
            entitiesOrganizations: 'Organizations',
            entitiesProducts: 'Products',
            entitiesNotes: 'Notes'
        },

        rules: {
            title: 'Rules Management',
            addRule: 'Add Rule',
            editRule: 'Edit Rule',
            deleteRule: 'Delete Rule',
            noRules: 'No rules configured',
            ruleAdded: 'Rule added successfully',
            ruleUpdated: 'Rule updated successfully',
            ruleDeleted: 'Rule deleted successfully',
            previousPage: 'Previous',
            nextPage: 'Next',
            pageInfo: 'Page {0} of {1} ({2} total rules)',
            enterRuleText: 'Enter rule text',
            save: 'Save',
            cancel: 'Cancel',
            autoGenerated: 'Auto-generated',
            loadingRules: 'Loading rules...',
            failedToLoadRules: 'Failed to load rules from server',
            failedToSaveRule: 'Failed to save rule',
            failedToUpdateRule: 'Failed to update rule',
            failedToDeleteRule: 'Failed to delete rule'
        },

        relations: {
            title: 'Table Relations Management',
            relationTypeToggle: 'Relation Type',
            implicitRelation: 'Implicit Relation',
            explicitRelation: 'Explicit Relation',
            requiredJoinToggle: 'Required Join',
            requiredJoin: 'Required Join',
            optionalJoin: 'Optional Join',
            ruleCreationError: 'An error occurred while creating the rule.',
            relationNotFound: 'The specified relation was not found.',
            implicitRelationDeletedSuccess: 'Implicit relation between "{0}" and "{1}" deleted successfully.',
            implicitRelationDeletionError: 'Error deleting implicit relation: {0}',
            existingRelations: 'Existing Relations',
            createNewRelation: 'Create New Relation',
            sourceTable: 'Source Table',
            implicitRelationCreatedSuccess: 'Implicit relation between "{0}" and "{1}" created successfully.',
            implicitRelationCreationError: 'Error creating implicit relation: {0}',
            sourceService: 'Source Service',
            sourceTableLabel: 'Source Table',
            jointionTable: 'JOIN Type',
            rightJoin: 'Right Join',
            leftJoin: 'Left Join',
            fullJoin: 'Full Join',
            innerJoin: 'Inner Join',
            crossJoin: 'Cross Join',
            sourceColumn: 'Source Column',
            relationType: 'Relation Type',
            targetTable: 'Target Table',
            targetService: 'Target Service',
            targetTableLabel: 'Target Table',
            targetColumn: 'Target Column',
            createRelation: 'Create Relation',
            cancel: 'Cancel',
            deleteRelation: 'Delete Relation',
            noRelationsFound: 'No relations found',
            fillAllFields: 'Please fill all required fields',
            relationCreatedSuccess: 'Relation between tables "{0}" and "{1}" created successfully',
            relationCreationError: 'Error creating relation: {0}',
            creating: 'Creating...',
            oneToOne: 'One to One (1:1)',
            oneToMany: 'One to Many (1:M)',
            manyToMany: 'Many to Many (M:M)',
            relationAlreadyExists: 'A relation between these tables already exists',
            relationDeletedSuccess: 'Relation deleted successfully',
            relationDeletionError: 'Error deleting relation: {0}',
            selectService: 'Select service',
            selectTable: 'Select table',
            selectColumn: 'Select column',
            existingRelationsFor: 'Existing Relations for',
            relationInfo: 'Relation',
            actions: 'Actions',
            relationsInfoTab: 'Relations Info',
            createRelationTab: 'Create Relation',
            visualDiagramTab: 'Visual Diagram',
            onUpdateAction: 'On Update Action',
            onDeleteAction: 'On Delete Action',
            noRelationsFoundForDiagram: 'No relations found for this table to display in diagram',
            selectTableForDiagram: 'Please select a table to view its relationship diagram',
            explicitRelations: 'Explicit Relations',
            implicitRelations: 'Implicit Relations',
            noExplicitRelationsFound: 'No explicit relations found',
            noImplicitRelationsFound: 'No implicit relations found'
        },

        FieldEditor: {
            fieldNameLabel: 'Field Name',
            displayNameLabel: 'Display Name',
            displayNamePlaceholder: 'Enter display name (optional)',
            displayNameDescription: 'Human-readable name for this field',
            dataTypeLabel: 'Data Type',
            defaultValueLabel: 'Default Value',
            precisionLabel: 'Precision',
            scaleLabel: 'Scale',
            requiredLabel: 'Required (NOT NULL)',
            primaryKeyLabel: 'Primary Key',
            uniqueConstraintLabel: 'Unique Constraint',
            errorFieldNameExists: 'A field with this name already exists in the table.',
            scalePlaceholder: 'Decimal places',
            hiddenFieldLabel: 'Hide Field from AI Queries',
            redirectUrlLabel: 'Link URL',
            redirectUrlPlaceholder: 'https://example.com/item/{field_name}',
            redirectUrlDescription: 'Use {field_name} for field value placeholders. Leave empty to disable redirect.',
            contextMenuItemNameDescription: 'Use {value} to insert the field value in the context menu item.',
            aiContextGenerationLabel: 'Enable AI Context Generation',
            contextMenuTitle: 'Context Menu',
            addContextMenuItem: 'Add Context Menu Item',
            contextMenuItemName: 'Item Name',
            contextMenuItemNamePlaceholder: 'Enter menu item name',
            noContextMenuItems: 'No context menu items',
            deleteContextMenuItem: 'Delete Item',
            editContextMenuItem: 'Edit Item'
        },

        TablesSection: {
            sectionTitle: 'Tables in {0}',
            loadingMessage: 'Loading database schema...',
            addTable: 'Add Table',
            editTable: 'Edit Table',
            deleteTable: 'Delete Table',
            manageRelations: 'Manage Relations',
            showTableInfo: 'Table Info',
            tableNameColumn: 'Table Name',
            fieldsCountColumn: 'Fields',
            statusColumn: 'Status',
            activeTablesCount: 'Active:',
            inactiveTablesCount: 'Inactive:',
            totalTablesCount: 'Total:',
            activeStatus: 'Active',
            inactiveStatus: 'Inactive',
            relationsTitle: 'Relations',
        },

        constructor: {
            nameTable: 'Table Name',
            errorTableNameExists: 'A table with this name already exists. Please choose a different name.',
            activeTableTitle: 'Active Table',
            activeTableLabel: 'Active Table',
        },

        FieldsSection: {
            sectionTitle: 'Fields',
            addField: 'Add Field',
            editField: 'Edit Field',
            deleteField: 'Delete Field',
            fieldName: 'Field Name',
            displayName: 'Display Name',
            type: 'Type',
            required: 'Required',
            primary: 'Primary',
            unique: 'Unique',
            hidden: 'Hidden',
            fieldsInTable: 'Fields in {0} table'
        }
    }
};

(window as IGlobal).VirtoStrings = strings;

export default strings;