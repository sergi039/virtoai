// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NL2SQL.WebApp.Models.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NL2SQL.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825163957_UpdateFieldsApolloServices")]
    partial class UpdateFieldsApolloServices
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ApolloContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_id");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_status");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Headline")
                        .HasColumnType("text")
                        .HasColumnName("headline");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text")
                        .HasColumnName("organization_id");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text")
                        .HasColumnName("photo_url");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("apollo_contact");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ApolloFreshdeskMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApolloId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apollo_id");

                    b.Property<float>("Confidence")
                        .HasColumnType("real")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FreshdeskId")
                        .HasColumnType("integer")
                        .HasColumnName("freshdesk_id");

                    b.Property<string>("MatchMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_method");

                    b.HasKey("Id");

                    b.HasIndex("ApolloId", "FreshdeskId")
                        .IsUnique();

                    b.ToTable("apollo_freshdesk_mapping");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ApolloOrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("Industry")
                        .HasColumnType("text")
                        .HasColumnName("industry");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization_id");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.ToTable("apollo_organization");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ApolloPipedriveMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApolloId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("apollo_id");

                    b.Property<float>("Confidence")
                        .HasColumnType("real")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("MatchMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_method");

                    b.Property<int>("PipedriveId")
                        .HasColumnType("integer")
                        .HasColumnName("pipedrive_id");

                    b.HasKey("Id");

                    b.HasIndex("ApolloId", "PipedriveId")
                        .IsUnique();

                    b.ToTable("apollo_pipedrive_mapping");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ApolloSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiUrl")
                        .HasColumnType("text")
                        .HasColumnName("api_url");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("EmailDomain")
                        .HasColumnType("text")
                        .HasColumnName("email_domain");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("LastSyncCount")
                        .HasColumnType("integer")
                        .HasColumnName("last_sync_count");

                    b.Property<DateTime?>("LastSyncTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sync_time");

                    b.Property<int>("Limit")
                        .HasColumnType("integer")
                        .HasColumnName("limit");

                    b.Property<bool>("MatchFreshdesk")
                        .HasColumnType("boolean")
                        .HasColumnName("match_freshdesk");

                    b.Property<bool>("MatchPipedrive")
                        .HasColumnType("boolean")
                        .HasColumnName("match_pipedrive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameUser")
                        .HasColumnType("text")
                        .HasColumnName("name_user");

                    b.Property<bool>("Setup")
                        .HasColumnType("boolean")
                        .HasColumnName("setup");

                    b.Property<int>("SyncDuration")
                        .HasColumnType("integer")
                        .HasColumnName("sync_duration");

                    b.Property<string>("SyncUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sync_unit");

                    b.Property<string>("Tables")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tables");

                    b.HasKey("Id");

                    b.ToTable("apollo_setting");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ChatUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text")
                        .HasColumnName("photo_url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("chat_user");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.FreshdeskAgentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("integer")
                        .HasColumnName("agent_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("freshdesk_agent");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.FreshdeskCompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Domains")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domains");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("freshdesk_company");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.FreshdeskContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("freshdesk_contact");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.FreshdeskConversationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attachments");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<int?>("FromId")
                        .HasColumnType("integer")
                        .HasColumnName("from_id");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserType")
                        .HasColumnType("text")
                        .HasColumnName("user_type");

                    b.HasKey("Id");

                    b.ToTable("freshdesk_conversation");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.FreshdeskSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiUrl")
                        .HasColumnType("text")
                        .HasColumnName("api_url");

                    b.Property<int>("BatchSize")
                        .HasColumnType("integer")
                        .HasColumnName("batch_size");

                    b.Property<bool>("Conversations")
                        .HasColumnType("boolean")
                        .HasColumnName("conversations");

                    b.Property<string>("Entities")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entities");

                    b.Property<bool>("Insecure")
                        .HasColumnType("boolean")
                        .HasColumnName("insecure");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("LastSyncCount")
                        .HasColumnType("integer")
                        .HasColumnName("last_sync_count");

                    b.Property<DateTime?>("LastSyncTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sync_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ParallelThreads")
                        .HasColumnType("integer")
                        .HasColumnName("parallel_threads");

                    b.Property<string>("Since")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("since");

                    b.Property<int>("SyncDuration")
                        .HasColumnType("integer")
                        .HasColumnName("sync_duration");

                    b.Property<string>("SyncUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sync_unit");

                    b.Property<string>("Tables")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tables");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<string>("Until")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("until");

                    b.HasKey("Id");

                    b.ToTable("freshdesk_setting");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.FreshdeskTicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomFields")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_fields");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueBy")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_by");

                    b.Property<DateTime?>("FrDueBy")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fr_due_by");

                    b.Property<bool>("FrEscalated")
                        .HasColumnType("boolean")
                        .HasColumnName("fr_escalated");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsEscalated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_escalated");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<long?>("RequesterId")
                        .HasColumnType("bigint")
                        .HasColumnName("requester_id");

                    b.Property<int?>("ResponderId")
                        .HasColumnType("integer")
                        .HasColumnName("responder_id");

                    b.Property<int>("Source")
                        .HasColumnType("integer")
                        .HasColumnName("source");

                    b.Property<bool>("Spam")
                        .HasColumnType("boolean")
                        .HasColumnName("spam");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<int>("TicketId")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("freshdesk_ticket");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.OrttoActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivityDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activity_date");

                    b.Property<string>("ActivityType")
                        .HasColumnType("text")
                        .HasColumnName("activity_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("text")
                        .HasColumnName("organization_id");

                    b.Property<string>("OrttoId")
                        .HasColumnType("text")
                        .HasColumnName("ortto_id");

                    b.Property<string>("PersonId")
                        .HasColumnType("text")
                        .HasColumnName("person_id");

                    b.HasKey("Id");

                    b.ToTable("ortto_activity");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.OrttoFreshdeskMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FreshdeskContactId")
                        .HasColumnType("integer")
                        .HasColumnName("freshdesk_contact_id");

                    b.Property<string>("OrttoPersonId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ortto_person_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrttoPersonId", "FreshdeskContactId")
                        .IsUnique();

                    b.ToTable("ortto_freshdesk_mapping");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.OrttoOrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OrttoId")
                        .HasColumnType("text")
                        .HasColumnName("ortto_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ortto_organization");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.OrttoPersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("OrttoId")
                        .HasColumnType("text")
                        .HasColumnName("ortto_id");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("text")
                        .HasColumnName("subscription_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("ortto_person");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.OrttoPipedriveMappingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("OrttoPersonId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ortto_person_id");

                    b.Property<int>("PipedriveContactId")
                        .HasColumnType("integer")
                        .HasColumnName("pipedrive_contact_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OrttoPersonId", "PipedriveContactId")
                        .IsUnique();

                    b.ToTable("ortto_pipedrive_mapping");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.OrttoSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiUrl")
                        .HasColumnType("text")
                        .HasColumnName("api_url");

                    b.Property<bool>("ImportData")
                        .HasColumnType("boolean")
                        .HasColumnName("import_data");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("LastSyncCount")
                        .HasColumnType("integer")
                        .HasColumnName("last_sync_count");

                    b.Property<DateTime?>("LastSyncTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sync_time");

                    b.Property<int>("Limit")
                        .HasColumnType("integer")
                        .HasColumnName("limit");

                    b.Property<bool>("MatchFreshdesk")
                        .HasColumnType("boolean")
                        .HasColumnName("match_freshdesk");

                    b.Property<bool>("MatchPipedrive")
                        .HasColumnType("boolean")
                        .HasColumnName("match_pipedrive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Setup")
                        .HasColumnType("boolean")
                        .HasColumnName("setup");

                    b.Property<int>("SyncDuration")
                        .HasColumnType("integer")
                        .HasColumnName("sync_duration");

                    b.Property<string>("SyncUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sync_unit");

                    b.Property<string>("Tables")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tables");

                    b.HasKey("Id");

                    b.ToTable("ortto_setting");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.PipedriveActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("activity_id");

                    b.Property<DateTime?>("AddTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("add_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<int?>("DealId")
                        .HasColumnType("integer")
                        .HasColumnName("deal_id");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("DueTime")
                        .HasColumnType("text")
                        .HasColumnName("due_time");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int?>("OrgId")
                        .HasColumnType("integer")
                        .HasColumnName("org_id");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.HasKey("Id");

                    b.ToTable("pipedrive_activity");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.PipedriveContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("add_time");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<string>("VisibleTo")
                        .HasColumnType("text")
                        .HasColumnName("visible_to");

                    b.HasKey("Id");

                    b.ToTable("pipedrive_contact");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.PipedriveDealEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("add_time");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_time");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<int>("DealId")
                        .HasColumnType("integer")
                        .HasColumnName("deal_id");

                    b.Property<int?>("OrgId")
                        .HasColumnType("integer")
                        .HasColumnName("org_id");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int?>("PipelineId")
                        .HasColumnType("integer")
                        .HasColumnName("pipeline_id");

                    b.Property<int?>("StageId")
                        .HasColumnType("integer")
                        .HasColumnName("stage_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("pipedrive_deal");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.PipedriveFreshdeskContactEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FreshdeskContactId")
                        .HasColumnType("integer")
                        .HasColumnName("freshdesk_contact_id");

                    b.Property<float>("MatchConfidence")
                        .HasColumnType("real")
                        .HasColumnName("match_confidence");

                    b.Property<string>("MatchMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_method");

                    b.Property<DateTime>("MatchedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("matched_at");

                    b.Property<int>("PipedriveContactId")
                        .HasColumnType("integer")
                        .HasColumnName("pipedrive_contact_id");

                    b.HasKey("Id");

                    b.HasIndex("PipedriveContactId", "FreshdeskContactId")
                        .IsUnique();

                    b.ToTable("pipedrive_freshdesk_contact");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.PipedriveOrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AddTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("add_time");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_time");

                    b.Property<string>("VisibleTo")
                        .HasColumnType("text")
                        .HasColumnName("visible_to");

                    b.HasKey("Id");

                    b.ToTable("pipedrive_organization");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.PipedriveSettingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("text")
                        .HasColumnName("api_key");

                    b.Property<string>("ApiUrl")
                        .HasColumnType("text")
                        .HasColumnName("api_url");

                    b.Property<string>("Entities")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entities");

                    b.Property<bool>("Full")
                        .HasColumnType("boolean")
                        .HasColumnName("full");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("LastSyncCount")
                        .HasColumnType("integer")
                        .HasColumnName("last_sync_count");

                    b.Property<DateTime?>("LastSyncTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sync_time");

                    b.Property<int>("Limit")
                        .HasColumnType("integer")
                        .HasColumnName("limit");

                    b.Property<bool>("MatchFreshdesk")
                        .HasColumnType("boolean")
                        .HasColumnName("match_freshdesk");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("Setup")
                        .HasColumnType("boolean")
                        .HasColumnName("setup");

                    b.Property<int>("SyncDuration")
                        .HasColumnType("integer")
                        .HasColumnName("sync_duration");

                    b.Property<string>("SyncUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sync_unit");

                    b.Property<string>("Tables")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tables");

                    b.HasKey("Id");

                    b.ToTable("pipedrive_setting");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceRegistryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("service_registry");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ServiceRegistryEntityId")
                        .HasColumnType("integer")
                        .HasColumnName("service_registry_id");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRegistryEntityId");

                    b.ToTable("service_table");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableFieldContextMenuItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ServiceTableFieldId")
                        .HasColumnType("integer")
                        .HasColumnName("service_table_field_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTableFieldId");

                    b.ToTable("service_table_field_context_menu_item");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableFieldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsAiContextGenerationEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ai_generate_context_enabled");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean")
                        .HasColumnName("is_hidden");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("ServiceTableId")
                        .HasColumnType("integer")
                        .HasColumnName("service_table_id");

                    b.Property<string>("UrlTemplate")
                        .HasColumnType("text")
                        .HasColumnName("url_template");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTableId");

                    b.ToTable("service_table_field");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableImplicitRelationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PrimaryTableColumn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_table_column");

                    b.Property<int>("RelatedServiceTableId")
                        .HasColumnType("integer")
                        .HasColumnName("related_service_table_id");

                    b.Property<string>("RelatedTableColumn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("related_table_column");

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relation_type");

                    b.Property<int>("ServiceTableId")
                        .HasColumnType("integer")
                        .HasColumnName("service_table_id");

                    b.Property<int>("SqlGenerationRuleId")
                        .HasColumnType("integer")
                        .HasColumnName("sql_generation_rule_id");

                    b.HasKey("Id");

                    b.HasIndex("RelatedServiceTableId");

                    b.HasIndex("ServiceTableId");

                    b.HasIndex("SqlGenerationRuleId");

                    b.ToTable("service_table_implicit_relation");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.SqlGenerationRuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ServiceTableId")
                        .HasColumnType("integer")
                        .HasColumnName("service_table_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTableId");

                    b.ToTable("sql_generation_rule");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.SqlMessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<bool>("IsSyntaxError")
                        .HasColumnType("boolean")
                        .HasColumnName("is_syntax_error");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer")
                        .HasColumnName("message_id");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reaction");

                    b.Property<string>("Sql")
                        .HasColumnType("text")
                        .HasColumnName("sql");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("sql_message");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.SqlTrainingDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("GeneratedSql")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("generated_sql");

                    b.Property<string>("NaturalLanguageQuery")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("natural_language_query");

                    b.HasKey("Id");

                    b.ToTable("sql_training_data");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Models.ChatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_owner_id");

                    b.HasKey("Id");

                    b.ToTable("chat");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Models.MessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<string>("CombinedQuery")
                        .HasColumnType("text")
                        .HasColumnName("text_query");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FollowUpQuestions")
                        .HasColumnType("text")
                        .HasColumnName("related_questions");

                    b.Property<bool>("IsUser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user");

                    b.Property<int?>("PreviousMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("previous_message_id");

                    b.Property<string>("Suggestions")
                        .HasColumnType("text")
                        .HasColumnName("suggestions");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("message");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ChatUserEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Models.ChatEntity", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Entities.ServiceRegistryEntity", "ServiceRegistryEntity")
                        .WithMany("ServiceTables")
                        .HasForeignKey("ServiceRegistryEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRegistryEntity");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableFieldContextMenuItemEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Entities.ServiceTableFieldEntity", "ServiceTableField")
                        .WithMany("ContextMenuItems")
                        .HasForeignKey("ServiceTableFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTableField");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableFieldEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Entities.ServiceTableEntity", "ServiceTable")
                        .WithMany("TableFields")
                        .HasForeignKey("ServiceTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceTable");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableImplicitRelationEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Entities.ServiceTableEntity", "RelatedServiceTable")
                        .WithMany("ImplicitRelationsAsRelated")
                        .HasForeignKey("RelatedServiceTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NL2SQL.WebApp.Entities.ServiceTableEntity", "ServiceTable")
                        .WithMany("ImplicitRelationsAsPrimary")
                        .HasForeignKey("ServiceTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NL2SQL.WebApp.Entities.SqlGenerationRuleEntity", "SqlGenerationRule")
                        .WithMany("ServiceTableImplicitRelations")
                        .HasForeignKey("SqlGenerationRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedServiceTable");

                    b.Navigation("ServiceTable");

                    b.Navigation("SqlGenerationRule");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.SqlGenerationRuleEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Entities.ServiceTableEntity", "ServiceTable")
                        .WithMany("SqlGenerationRules")
                        .HasForeignKey("ServiceTableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ServiceTable");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.SqlMessageEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Models.MessageEntity", "Message")
                        .WithMany("SqlMessages")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Models.MessageEntity", b =>
                {
                    b.HasOne("NL2SQL.WebApp.Models.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceRegistryEntity", b =>
                {
                    b.Navigation("ServiceTables");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableEntity", b =>
                {
                    b.Navigation("ImplicitRelationsAsPrimary");

                    b.Navigation("ImplicitRelationsAsRelated");

                    b.Navigation("SqlGenerationRules");

                    b.Navigation("TableFields");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.ServiceTableFieldEntity", b =>
                {
                    b.Navigation("ContextMenuItems");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Entities.SqlGenerationRuleEntity", b =>
                {
                    b.Navigation("ServiceTableImplicitRelations");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Models.ChatEntity", b =>
                {
                    b.Navigation("ChatUsers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("NL2SQL.WebApp.Models.MessageEntity", b =>
                {
                    b.Navigation("SqlMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
